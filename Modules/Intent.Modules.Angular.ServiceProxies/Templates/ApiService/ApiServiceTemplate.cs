// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Angular.ServiceProxies.Templates.ApiService
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.TypeScript.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Dev\Intent.Modules.Web\Modules\Intent.Modules.Angular.ServiceProxies\Templates\ApiService\ApiServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ApiServiceTemplate : TypeScriptTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("import { Injectable } from \'@angular/core\';\r\nimport { HttpHeaders, HttpClient, Ht" +
                    "tpParams } from \'@angular/common/http\';\r\nimport { Observable, throwError } from " +
                    "\'rxjs\';\r\nimport { catchError } from \'rxjs/operators\';\r\n\r\n@Injectable(");
            
            #line 13 "D:\Dev\Intent.Modules.Web\Modules\Intent.Modules.Angular.ServiceProxies\Templates\ApiService\ApiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(InjectableHelpers.GetOptions(this)));
            
            #line default
            #line hidden
            this.Write(")\r\nexport class ");
            
            #line 14 "D:\Dev\Intent.Modules.Web\Modules\Intent.Modules.Angular.ServiceProxies\Templates\ApiService\ApiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@" {
  constructor(
    private http: HttpClient
  ) { }

  private formatErrors(error: any) {
    return throwError(error.error || error);
  }

  get(path: string, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {
    return this.http.get(`${");
            
            #line 24 "D:\Dev\Intent.Modules.Web\Modules\Intent.Modules.Angular.ServiceProxies\Templates\ApiService\ApiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EnvironmentTypeName));
            
            #line default
            #line hidden
            this.Write(".api_base_url}${path}`, { params, headers, responseType })\r\n      .pipe(catchErro" +
                    "r(this.formatErrors));\r\n  }\r\n\r\n  put(path: string, body: Object = {}, params?: H" +
                    "ttpParams, headers?: HttpHeaders, responseType:any = \'json\'): Observable<any> {\r" +
                    "\n    headers = (headers ?? new HttpHeaders()).append(\'Content-Type\', \'applicatio" +
                    "n/json\');\r\n\r\n    return this.http.put(\r\n      `${environment.api_base_url}${path" +
                    "}`,\r\n      JSON.stringify(body),\r\n      {\r\n        params, headers, responseType" +
                    "\r\n      }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  putWithFormData(" +
                    "path: string, formData: FormData, params?: HttpParams, headers?: HttpHeaders, re" +
                    "sponseType:any = \'json\'): Observable<any> {\r\n    return this.http.put(\r\n      `$" +
                    "{environment.api_base_url}${path}`,\r\n      formData,\r\n      { params, headers, r" +
                    "esponseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  post(path: s" +
                    "tring, body: Object = {}, params?: HttpParams, headers?: HttpHeaders, responseTy" +
                    "pe:any = \'json\'): Observable<any> {\r\n    headers = (headers ?? new HttpHeaders()" +
                    ").append(\'Content-Type\', \'application/json\');\r\n    return this.http.post(\r\n     " +
                    " `${environment.api_base_url}${path}`,\r\n      JSON.stringify(body),\r\n      { par" +
                    "ams, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r" +
                    "\n  postWithFormData(path: string, formData: FormData, params?: HttpParams, heade" +
                    "rs?: HttpHeaders, responseType:any = \'json\'): Observable<any> {\r\n    return this" +
                    ".http.post(\r\n      `${environment.api_base_url}${path}`,\r\n      formData,\r\n     " +
                    " { params, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n" +
                    "  }\r\n\r\n  delete(path: string, params?: HttpParams, headers?: HttpHeaders, respon" +
                    "seType:any = \'json\'): Observable<any> {\r\n    return this.http.delete(\r\n      `${" +
                    "environment.api_base_url}${path}`,\r\n      { params, headers, responseType }\r\n   " +
                    " ).pipe(catchError(this.formatErrors));\r\n  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
