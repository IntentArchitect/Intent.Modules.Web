<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.WebClient.Angular.Api.FormGroupDefinitionModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
import { FormGroup, FormControl, FormArray } from '@angular/forms';

export class <#= ClassName #> extends FormGroup {
  public static createEmpty(): <#= ClassName #> {
    return new <#= ClassName #>({
<#  foreach (var control in Model.Fields) {#>
      <#= control.Name.ToCamelCase() #>: <#= GetFieldDefaultValue(control) #>,
<#  }#>
    });
  }
<#  if (Model.Mapping != null) { #>

  public static create(dto: <#= GetTypeName(Model.Mapping) #>): <#= ClassName #> {
    return new <#= ClassName #>({
<#      foreach (var field in Model.Fields) {#>
      <#= field.Name.ToCamelCase() #>: <#= field.InternalElement.IsMapped ? GetPathFromMapping("dto.", field) : GetFieldDefaultValue(field) #>,
<#      }#>
    });
  }
<#  } #>

  constructor(initialValue: {
<#  foreach (var control in Model.Fields) {#>
    <#= control.Name.ToCamelCase() #>: <#= GetTypeName(control.TypeReference) #>;
<#  }#>
  }) {
    super({
<#  foreach (var control in Model.Fields) {#>
      <#= control.Name.ToCamelCase() #>: new <#= GetFormFieldType(control) #>(initialValue.<#= control.Name.ToCamelCase() #>),
<#  }#>
    });
  }

<#  foreach (var control in Model.Fields) {#>
  get <#= control.Name.ToCamelCase() #>(): <#= GetTypeName(control.TypeReference) #> { return this.get("<#= control.Name.ToCamelCase() #>").value; }
<#  }#>
}