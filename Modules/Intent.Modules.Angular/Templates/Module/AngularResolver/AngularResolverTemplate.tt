<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.WebClient.Angular.Api.ResolverModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.WebClient.Angular.Api" #>
import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';
import {Observable} from 'rxjs';
import {Injectable} from '@angular/core';

@Injectable()
export class <#= ClassName #> implements Resolve<<#= GetTypeName(Model.TypeReference) #>> {

  // @IntentCanAdd()
  constructor() { }

  <#= this.IntentIgnoreBodyDecorator() #>
  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<<#= GetTypeName(Model.TypeReference) #>> | Promise<<#= GetTypeName(Model.TypeReference) #>> | <#= GetTypeName(Model.TypeReference) #> {
  
  }
}
