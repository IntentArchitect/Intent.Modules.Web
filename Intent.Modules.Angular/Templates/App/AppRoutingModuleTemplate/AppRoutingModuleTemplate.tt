<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Angular.Api.AngularWebAppModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.WebClient.Api" #>
import { NgModule } from '@angular/core';
import { Routes, RouterModule, PreloadAllModules } from '@angular/router';

const routes: Routes = [
<#  foreach(var redirect in Redirects) { #>
  {
    path: '<#= redirect.Name #>',
    redirectTo: '<#= redirect.RedirectTo  #>'
  },
<#  } #>
<# foreach(var route in Routes.Where(x => x.RoutesToComponent)) {#>
  {
    path: '<#= GetRoute(route) #>',
    component: <#= GetTypeName(route) #>
  },
<# } #>
<# foreach(var route in Routes.Where(x => x.RoutesToModule)) {#>
  {
    path: '<#= GetRoute(route) #>',
    loadChildren: () => import('./<#= GetModulePath(route) #>').then(x => x.<#= GetModuleClassName(route) #>)
  },
<# } #>
];

<#= this.IntentMergeDecorator() #>
@NgModule({
  imports: [RouterModule.forRoot(routes, {
    preloadingStrategy: PreloadAllModules
  })],
  exports: [RouterModule]
})
export class AppRoutingModule { }
