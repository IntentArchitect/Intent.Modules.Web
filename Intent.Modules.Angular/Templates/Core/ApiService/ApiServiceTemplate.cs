// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Angular.Templates.Core.ApiService
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.TypeScript.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules.Web\Intent.Modules.Angular\Templates\Core\ApiService\ApiServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ApiServiceTemplate : TypeScriptTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("import { Injectable } from '@angular/core';\r\nimport { environment } from \"../../environments/environment\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ");
            
            #line 15 "C:\Dev\Intent.Modules.Web\Intent.Modules.Angular\Templates\Core\ApiService\ApiServiceTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" {\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  private formatErrors(error: any) {\r\n    return throwError(error.error || error);\r\n  }\r\n\r\n  get(path: string, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    return this.http.get(`${environment.api_base_url}${path}`, { params, headers, responseType })\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  put(path: string, body: Object = {}, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    headers = (headers ?? new HttpHeaders()).append('Content-Type', 'application/json');\r\n\r\n    return this.http.put(\r\n      `${environment.api_base_url}${path}`,\r\n      JSON.stringify(body),\r\n      {\r\n        params, headers, responseType\r\n      }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  putWithFormData(path: string, formData: FormData, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    return this.http.put(\r\n      `${environment.api_base_url}${path}`,\r\n      formData,\r\n      { params, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  post(path: string, body: Object = {}, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    headers = (headers ?? new HttpHeaders()).append('Content-Type', 'application/json');\r\n    return this.http.post(\r\n      `${environment.api_base_url}${path}`,\r\n      JSON.stringify(body),\r\n      { params, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  postWithFormData(path: string, formData: FormData, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    return this.http.post(\r\n      `${environment.api_base_url}${path}`,\r\n      formData,\r\n      { params, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  delete(path, params?: HttpParams, headers?: HttpHeaders, responseType:any = 'json'): Observable<any> {\r\n    return this.http.delete(\r\n      `${environment.api_base_url}${path}`,\r\n      { params, headers, responseType }\r\n    ).pipe(catchError(this.formatErrors));\r\n  }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
}
